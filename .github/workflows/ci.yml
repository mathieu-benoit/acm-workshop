name: ci-app
permissions:
  id-token: write
  contents: read
  security-events: write
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.github/dependabot.yml'
  pull_request:
env:
  SEVERITY: CRITICAL
jobs:
  container:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          submodules: true
      - uses: google-github-actions/auth@v1.1.1
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER }}'
          service_account: '${{ secrets.CONTAINER_IMAGE_BUILDER_SERVICE_ACCOUNT_ID }}'
          token_format: 'access_token'
      - uses: google-github-actions/setup-gcloud@v1.1.1
        with:
          version: latest
      - name: prepare environment variables
        run: |
          shortSha=`echo ${GITHUB_SHA} | cut -c1-7`
          echo "IMAGE_TAG=$shortSha" >> $GITHUB_ENV
          imageBaseName=${{ secrets.CONTAINER_REGISTRY_HOST_NAME }}/${{ secrets.CONTAINER_REGISTRY_PROJECT_ID }}/${{ secrets.CONTAINER_REGISTRY_NAME }}
          echo "IMAGE_BASE_NAME=$imageBaseName" >> $GITHUB_ENV
          echo "IMAGE_NAME=$imageBaseName/acm-workshop:$shortSha" >> $GITHUB_ENV
      - name: sign-in to artifact registry
        run: |
          gcloud auth configure-docker ${{ secrets.CONTAINER_REGISTRY_HOST_NAME }} --quiet
      - name: manage base images
        run: |
          cd app
          # Grab the build base image in our private registry
          baseImage=$(cat Dockerfile | grep 'FROM alpine')
          baseImage=($baseImage)
          docker pull ${baseImage[1]}
          newImage=$(echo ${baseImage[1]} | sed "s,alpine,${IMAGE_BASE_NAME}/alpine,g")
          docker tag ${baseImage[1]} $newImage
          docker push $newImage
          # Grab the runtime base image in our private registry
          baseImage=$(cat Dockerfile | grep 'FROM nginxinc')
          baseImage=($baseImage)
          docker pull ${baseImage[1]}
          newImage=$(echo ${baseImage[1]} | sed "s,nginxinc,${IMAGE_BASE_NAME},g")
          docker tag ${baseImage[1]} $newImage
          docker push $newImage
          # Use the base images from our own private registry
          sed -i "s,FROM alpine,FROM ${IMAGE_BASE_NAME}/alpine,g;s,FROM nginxinc,FROM ${IMAGE_BASE_NAME},g" Dockerfile
      - name: build container
        run: |
          cd app
          docker build --tag ${IMAGE_NAME} .
          imageSize=$(printf %.2f "$(($(docker image inspect ${IMAGE_NAME} --format='{{.Size}}') * 10**2 / $(printf '%5.0f\n' 1e6)))e-2")
          echo "IMAGE_SIZE=$imageSize"
      - name: dockle
        run: |
          docker run -v /var/run/docker.sock:/var/run/docker.sock --rm goodwithtech/dockle:latest -ak KEY_SHA512 --exit-code 1 --exit-level fatal ${IMAGE_NAME}
      - name: run trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ env.SEVERITY }}
      - name: upload trivy scan results to GitHub security tab
        uses: github/codeql-action/upload-sarif@v2.3.6
        with:
          sarif_file: 'trivy-results.sarif'
      - name: run container locally as a test
        run: |
          docker run -d -p 8080:8080 --read-only --cap-drop=ALL --user=1000 ${IMAGE_NAME}
      - name: gcloud scan
        run: |
          gcloud components install local-extract --quiet
          gcloud artifacts docker images scan ${IMAGE_NAME} --format='value(response.scan)' > scan_id.txt
          gcloud artifacts docker images list-vulnerabilities $(cat scan_id.txt) --format='table(vulnerability.effectiveSeverity, vulnerability.cvssScore, noteName, vulnerability.packageIssue[0].affectedPackage, vulnerability.packageIssue[0].affectedVersion.name, vulnerability.packageIssue[0].fixedVersion.name)'
          gcloud artifacts docker images list-vulnerabilities $(cat scan_id.txt) --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq ${{ env.SEVERITY }}; then echo 'Failed vulnerability check' && exit 1; else exit 0; fi
      - name: push image in artifact registry
        if: ${{ github.event_name == 'push' }}
        run: |
          docker push ${IMAGE_NAME}
  chart:
    needs: container
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0
      - name: prepare environment variables
        run: |
          shortSha=`echo ${GITHUB_SHA} | cut -c1-7`
          echo "APP_VERSION=$shortSha" >> $GITHUB_ENV
          chartBaseName=${{ secrets.CONTAINER_REGISTRY_HOST_NAME }}/${{ secrets.CONTAINER_REGISTRY_PROJECT_ID }}/${{ secrets.CHART_REGISTRY_NAME }}
          echo "CHART_BASE_NAME=$chartBaseName" >> $GITHUB_ENV
          echo "CHART_NAME=acm-workshop" >> $GITHUB_ENV
      - name: helm lint
        run: |
          helm lint chart/ --strict
          helm template chart/ > helm-output.yaml
          kustomize create --resources helm-output.yaml
          kustomize build .
      - uses: google-github-actions/auth@v1.1.1
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER }}'
          service_account: '${{ secrets.CONTAINER_IMAGE_BUILDER_SERVICE_ACCOUNT_ID }}'
          token_format: 'access_token'
      - uses: google-github-actions/setup-gcloud@v1.1.1
        with:
          version: latest
      - name: sign-in to artifact registry
        run: |
          gcloud auth configure-docker ${{ secrets.CONTAINER_REGISTRY_HOST_NAME }} --quiet
      - name: package chart
        run: |
          helm package chart/ --version 1.0.0-${APP_VERSION} --app-version ${APP_VERSION}
      - name: push chart in artifact registry
        if: ${{ github.event_name == 'push' }}
        run: |
          helm push ${CHART_NAME}-1.0.0-${APP_VERSION}.tgz oci://${CHART_BASE_NAME}

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4. GKE cluster on </title>
    <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/index.html</link>
    <description>Recent content in 4. GKE cluster on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://mathieu-benoit.github.io/acm-workshop/gke-cluster/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Allow GKE</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/allow-gke/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/allow-gke/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision the GKE cluster.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define roles Define the container.admin, iam.serviceAccountAdmin, resourcemanager.projectIamAdmin, iam.serviceAccountUser and serviceusage.serviceUsageConsumer roles with an IAMPolicyMember resource for the Tenant project&amp;rsquo;s service account:</description>
    </item>
    <item>
      <title>Enforce GKE policies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/enforce-gke-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/enforce-gke-policies/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will set up policies in order to enforce governance against the Kubernetes manifests defining your GKE cluster. This will guarantee that the best practices in term of security are respected.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Enforce GKE clusters policies Define the ConstraintTemplate:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/policies/templates/gkeclusterrequirement.yaml apiVersion: templates.gatekeeper.sh/v1 kind: ConstraintTemplate metadata: name: gkeclusterrequirement annotations: description: &amp;#34;Requirements for any GKE cluster.</description>
    </item>
    <item>
      <title>Create GKE cluster</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/create-gke-cluster/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/create-gke-cluster/index.html</guid>
      <description>Duration: 20 min | Persona: Platform Admin
In this section, you will set up a secured GKE cluster including features like: workload identity, least privilege service account for the nodes, Dataplane V2, private nodes, confidential and shielded nodes, etc.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export TENANT_PROJECT_NUMBER=$(gcloud projects describe $TENANT_PROJECT_ID --format=&amp;#39;get(projectNumber)&amp;#39;)&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export GKE_SA=gke-primary-pool&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Define GKE cluster Define the GKE cluster with empty node pool:</description>
    </item>
    <item>
      <title>Allow Fleet</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/allow-fleet/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/allow-fleet/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision the Fleet features.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define role Define the gkehub.admin role with an IAMPolicyMember for the Tenant project&amp;rsquo;s service account:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/projects/$TENANT_PROJECT_ID/gke-hub-admin.yaml apiVersion: iam.</description>
    </item>
    <item>
      <title>Set up GKE configs&#39;s Git repo</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/set-up-gke-configs-git-repo/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/set-up-gke-configs-git-repo/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will set up Config Sync and Policy Controller for the GKE cluster. You will also configure a main/root GitHub repository for this GKE cluster.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export GKE_CONFIGS_DIR_NAME=acm-workshop-gke-configs-repo&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Define ACM GKEHubFeature Define the ACM GKEHubFeature resource:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/gke-hub-feature-acm.yaml apiVersion: gkehub.cnrm.cloud.google.com/v1beta1 kind: GKEHubFeature metadata: name: configmanagement namespace: ${TENANT_PROJECT_ID} spec: projectRef: name: ${TENANT_PROJECT_ID} location: global resourceID: configmanagement EOF Note The resourceID must be configmanagement if you want to use Anthos Config Management feature.</description>
    </item>
    <item>
      <title>Enforce Kubernetes policies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/enforce-kubernetes-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/enforce-kubernetes-policies/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will enforce Kubernetes policies for Pod Security Admission (PSA) and NetworkPolicies.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Enforce Pod Security Admission (PSA) policies As best practice we will ensure that any Namespaces enables the Pod Security Admission (PSA) feature.
Define the namespaces-required-psa-label Constraint based on the K8sRequiredLabels ConstraintTemplate for Namespaces:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/policies/constraints/namespaces-required-psa-label.yaml apiVersion: constraints.gatekeeper.sh/v1beta1 kind: K8sRequiredLabels metadata: name: namespaces-required-psa-label annotations: policycontroller.</description>
    </item>
    <item>
      <title>Set up NetworkPolicies logging</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/set-up-network-policies-logging/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/set-up-network-policies-logging/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up the NetworkPolicies logging in order to get more insights about the logs generated by the denied or allowed requests controlled by NetworkPolicies thanks to the GKE Dataplane V2 feature.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define Network Policy logging cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/networkpolicies-logging.yaml kind: NetworkLogging apiVersion: networking.gke.io/v1alpha1 metadata: name: default spec: cluster: allow: log: false delegate: false deny: log: true delegate: false EOF Deploy Kubernetes manifests cd ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/ git add .</description>
    </item>
  </channel>
</rss>
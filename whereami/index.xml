<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>8. Whereami app on </title>
    <link>https://mathieu-benoit.github.io/acm-workshop/whereami/index.html</link>
    <description>Recent content in 8. Whereami app on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://mathieu-benoit.github.io/acm-workshop/whereami/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Set up DNS</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/set-up-dns/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/set-up-dns/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up a dedicated DNS with Cloud Endpoints you will use later for the Whereami app.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export WHERE_AMI_INGRESS_GATEWAY_HOST_NAME=&amp;#39;whereami.endpoints.${TENANT_PROJECT_ID}.cloud.goog&amp;#39;&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.shCreate FQDN Create an FQDN with Cloud Endpoints for Whereami:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}dns-spec.yaml swagger: &amp;#34;2.0&amp;#34; info: description: &amp;#34;Whereami Cloud Endpoints DNS&amp;#34; title: &amp;#34;Whereami Cloud Endpoints DNS&amp;#34; version: &amp;#34;1.0.0&amp;#34; paths: {} host: &amp;#34;${WHERE_AMI_INGRESS_GATEWAY_HOST_NAME}&amp;#34; x-google-endpoints: - name: &amp;#34;${WHERE_AMI_INGRESS_GATEWAY_HOST_NAME}&amp;#34; target: &amp;#34;${INGRESS_GATEWAY_PUBLIC_IP}&amp;#34; EOF gcloud endpoints services deploy ${WORK_DIR}dns-spec.</description>
    </item>
    <item>
      <title>Set up URL uptime check</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/set-up-url-uptime-check/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/set-up-url-uptime-check/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will set up an uptime check on the Whereami URL.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shmkdir ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/$WHEREAMI_NAMESPACEDefine Uptime check config Define the MonitoringUptimeCheckConfig:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/$WHEREAMI_NAMESPACE/uptime-check-config.yaml apiVersion: monitoring.cnrm.cloud.google.com/v1beta1 kind: MonitoringUptimeCheckConfig metadata: name: uptimecheckconfig-${WHEREAMI_NAMESPACE} spec: projectRef: name: ${TENANT_PROJECT_ID} displayName: ${WHEREAMI_NAMESPACE} period: 900s timeout: 5s monitoredResource: type: &amp;#34;uptime_url&amp;#34; filterLabels: host: ${WHERE_AMI_INGRESS_GATEWAY_HOST_NAME} project_id: ${TENANT_PROJECT_ID} httpCheck: port: 443 requestMethod: GET useSsl: true validateSsl: true EOFDeploy Kubernetes manifests cd ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/ git add .</description>
    </item>
    <item>
      <title>Configure Config Sync</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/configure-config-sync/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/configure-config-sync/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will configure Config Sync to sync the resources in the Whereami Namespace via its associated RepoSync and RoleBinding.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export WHEREAMI_NAMESPACE=whereami&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export WHERE_AMI_DIR_NAME=acm-workshop-whereami-repo&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.shmkdir -p ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs mkdir ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs/$WHEREAMI_NAMESPACECreate Namespace Define a dedicated Namespace for the Whereami app:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs/$WHEREAMI_NAMESPACE/namespace.yaml apiVersion: v1 kind: Namespace metadata: labels: istio-injection: enabled pod-security.</description>
    </item>
    <item>
      <title>Prepare container</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/prepare-container/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/prepare-container/index.html</guid>
      <description>Duration: 5 min | Persona: Apps Operator
In this section, you will copy the Whereami app container in your private Artifact Registry. You will also scan this container image.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh WHEREAMI_VERSION=v1.2.14 PRIVATE_WHEREAMI_IMAGE_NAME=$CONTAINER_REGISTRY_REPOSITORY/whereami:$WHEREAMI_VERSION echo &amp;#34;export PRIVATE_WHEREAMI_IMAGE_NAME=${PRIVATE_WHEREAMI_IMAGE_NAME}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.shCopy the public container image to your private registry:
UPSTREAM_WHEREAMI_IMAGE_NAME=us-docker.pkg.dev/google-samples/containers/gke/whereami:$WHEREAMI_VERSION gcloud auth configure-docker $CONTAINER_REGISTRY_HOST_NAME --quiet crane copy $UPSTREAM_WHEREAMI_IMAGE_NAME $PRIVATE_WHEREAMI_IMAGE_NAMEList the container images in your private registry:
gcloud artifacts docker images list $CONTAINER_REGISTRY_REPOSITORY \ --include-tagsScan the whereami container image:</description>
    </item>
    <item>
      <title>Deploy app</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/deploy-app/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/deploy-app/index.html</guid>
      <description>Duration: 10 min | Persona: Apps Operator
In this section, you will deploy the Whereami app.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shGet upstream Kubernetes manifests Get the upstream Kubernetes manifests:
cd ${WORK_DIR}$WHERE_AMI_DIR_NAME kpt pkg get https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/whereami/k8s rm k8s/Kptfile mv k8s upstreamCreate base overlay Create Kustomize base overlay files:
mkdir ${WORK_DIR}$WHERE_AMI_DIR_NAME/base cd ${WORK_DIR}$WHERE_AMI_DIR_NAME/base kustomize create kustomize edit add resource ../upstream cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; ${WORK_DIR}$WHERE_AMI_DIR_NAME/base/kustomization.yaml patchesJson6902: - target: kind: Service name: whereami patch: |- - op: replace path: /spec/type value: ClusterIP EOF Info Here we are changing the Service type to ClusterIP because the Whereami app will be exposed by the Ingress Gateway.</description>
    </item>
    <item>
      <title>Deploy AuthorizationPolicy</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/deploy-authorization-policy/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/deploy-authorization-policy/index.html</guid>
      <description>Duration: 5 min | Persona: Apps Operator
In this section, you will see how to track the AuthorizationPolicies issue and then you will deploy granular and specific AuthorizationPolicies for the Whereami namespace to fix this issue.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shSee the AuthorizationPolicies issue See the AuthorizationPolicies issue in the GKE cluster for the Whereami app, by running this command and click on this link:
echo -e &amp;#34;https://console.cloud.google.com/anthos/security/workload-view/Deployment/${GKE_LOCATION}/${GKE_NAME}/${WHEREAMI_NAMESPACE}/whereami?project=${TENANT_PROJECT_ID}&amp;#34;Under the Service requests section on this page, you will see some Inbound denials depending on how many times you tried to refresh the Whereami app endpoint.</description>
    </item>
    <item>
      <title>Deploy NetworkPolicies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/deploy-network-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/deploy-network-policies/index.html</guid>
      <description>Duration: 5 min | Persona: Apps Operator
In this section, you will see the Policy Controller violation regarding to the missing NetworkPolicies in the Whereami namespace. Then, you will fix this violation by deploying the associated resources.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shSee the Policy Controller violations See the Policy Controller violations in the GKE cluster, by running this command and click on this link:
echo -e &amp;#34;https://console.cloud.google.com/kubernetes/policy_controller/dashboard?project=${TENANT_PROJECT_ID}&amp;#34;You will see that the K8sRequireNamespaceNetworkPolicies Constraint has this violation: Namespace &amp;lt;whereami&amp;gt; does not have a NetworkPolicy.</description>
    </item>
    <item>
      <title>Deploy Sidecar</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/deploy-sidecar/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/deploy-sidecar/index.html</guid>
      <description>Duration: 5 min | Persona: Apps Operator
In this section, you will deploy a fine granular Sidecar in order to optimize the resources (CPU/Memory) usage of the Whereami app&amp;rsquo;s sidecar proxy. By default, each application in the whereami Namespace can reach to all the endpoints in the mesh. The Sidecar resource allows to reduce that list to the strict minimum of which endpoints it needs to communicate with.
Initialize variables:</description>
    </item>
  </channel>
</rss>
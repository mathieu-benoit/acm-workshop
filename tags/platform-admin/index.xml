<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>platform-admin on </title>
    <link>https://mathieu-benoit.github.io/acm-workshop/tags/platform-admin/index.html</link>
    <description>Recent content in platform-admin on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://mathieu-benoit.github.io/acm-workshop/tags/platform-admin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create IP address</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/create-ip-address/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/create-ip-address/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will create a public IP address in order to expose all your applications in your Service Mesh thanks to an Ingress Gateway you will configure.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export INGRESS_GATEWAY_PUBLIC_IP_NAME=${GKE_NAME}-asm-ingressgateway&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Define IP address Define the Ingress Gateway&amp;rsquo;s public static IP address resource:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/public-ip-address.yaml apiVersion: compute.cnrm.cloud.google.com/v1beta1 kind: ComputeAddress metadata: annotations: cnrm.</description>
    </item>
    <item>
      <title>Set up DNS</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/bankofanthos/set-up-dns/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/bankofanthos/set-up-dns/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up a dedicated DNS with Cloud Endpoints you will use later for the Bank of Anthos app.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export BANK_OF_ANTHOS_INGRESS_GATEWAY_HOST_NAME=&amp;#39;bankofanthos.endpoints.${TENANT_PROJECT_ID}.cloud.goog&amp;#39;&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Create FQDN Create an FQDN with Cloud Endpoints for Bank of Anthos:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}dns-spec.yaml swagger: &amp;#34;2.0&amp;#34; info: description: &amp;#34;Bank of Anthos Cloud Endpoints DNS&amp;#34; title: &amp;#34;Bank of Anthos Cloud Endpoints DNS&amp;#34; version: &amp;#34;1.</description>
    </item>
    <item>
      <title>Set up DNS</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/set-up-dns/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/set-up-dns/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up a dedicated DNS with Cloud Endpoints you will use later for the Online Boutique app.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export ONLINE_BOUTIQUE_INGRESS_GATEWAY_HOST_NAME=&amp;#39;onlineboutique.endpoints.${TENANT_PROJECT_ID}.cloud.goog&amp;#39;&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Create FQDN Create an FQDN with Cloud Endpoints for Online Boutique:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}dns-spec.yaml swagger: &amp;#34;2.0&amp;#34; info: description: &amp;#34;Online Boutique Cloud Endpoints DNS&amp;#34; title: &amp;#34;Online Boutique Cloud Endpoints DNS&amp;#34; version: &amp;#34;1.</description>
    </item>
    <item>
      <title>Set up DNS</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/set-up-dns/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/set-up-dns/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up a dedicated DNS with Cloud Endpoints you will use later for the Whereami app.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export WHERE_AMI_INGRESS_GATEWAY_HOST_NAME=&amp;#39;whereami.endpoints.${TENANT_PROJECT_ID}.cloud.goog&amp;#39;&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Create FQDN Create an FQDN with Cloud Endpoints for Whereami:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}dns-spec.yaml swagger: &amp;#34;2.0&amp;#34; info: description: &amp;#34;Whereami Cloud Endpoints DNS&amp;#34; title: &amp;#34;Whereami Cloud Endpoints DNS&amp;#34; version: &amp;#34;1.0.0&amp;#34; paths: {} host: &amp;#34;${WHERE_AMI_INGRESS_GATEWAY_HOST_NAME}&amp;#34; x-google-endpoints: - name: &amp;#34;${WHERE_AMI_INGRESS_GATEWAY_HOST_NAME}&amp;#34; target: &amp;#34;${INGRESS_GATEWAY_PUBLIC_IP}&amp;#34; EOF gcloud endpoints services deploy ${WORK_DIR}dns-spec.</description>
    </item>
    <item>
      <title>Set up Network</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/networking/set-up-network/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/networking/set-up-network/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up the VPC, subnet and Cloud NAT which will be used by the GKE cluster later.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export GKE_NAME=gke&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Define VPC and Subnet Define the VPC:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/vpc.yaml apiVersion: compute.cnrm.cloud.google.com/v1beta1 kind: ComputeNetwork metadata: annotations: cnrm.cloud.google.com/project-id: ${TENANT_PROJECT_ID} name: ${GKE_NAME} namespace: ${TENANT_PROJECT_ID} spec: routingMode: REGIONAL autoCreateSubnetworks: false EOF Define the Subnet:</description>
    </item>
    <item>
      <title>Verify ASM version</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/monitoring-and-audit/verify-asm-version/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/monitoring-and-audit/verify-asm-version/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will verify in the Google Cloud console the versions of both: the control plane and data plane of ASM.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Managed Anthos Service Mesh is a Google-managed control plane and data plane that you simply configure. Google handles their reliability, upgrades, scaling and security for you.
You can view the versions of the control plane (revision column below) and data plane (proxy-version column below) in Monitoring &amp;gt; Metrics Explorer.</description>
    </item>
    <item>
      <title>Create Artifact Registry</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/create-artifact-registry/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/create-artifact-registry/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up your own private Artifact Registry to store both all the container images and the Helm charts required for this workshop. You will also grant viewer access to both: the GKE&amp;rsquo;s GSA and Config Sync&amp;rsquo;s GSA.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh CONTAINER_REGISTRY_NAME=containers echo &amp;#34;export CONTAINER_REGISTRY_NAME=${CONTAINER_REGISTRY_NAME}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh CHART_REGISTRY_NAME=charts echo &amp;#34;export CHART_REGISTRY_NAME=${CHART_REGISTRY_NAME}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh CONTAINER_REGISTRY_HOST_NAME=${GKE_LOCATION}-docker.pkg.dev echo &amp;#34;export CONTAINER_REGISTRY_HOST_NAME=${CONTAINER_REGISTRY_HOST_NAME}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.</description>
    </item>
    <item>
      <title>Create Spanner</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/spanner/create-spanner/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/spanner/create-spanner/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will create a Spanner instance and database for the Online Boutique&amp;rsquo;s cartservice app to connect to. You will also configure the associated cartservice&amp;rsquo;s Google Service account to have fine granular read access to the Spanner database via Workload Identity.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export SPANNER_INSTANCE_NAME=onlineboutique&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export SPANNER_DATABASE_NAME=carts&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export SPANNER_DATABASE_USER_GSA_NAME=spanner-db-user&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.</description>
    </item>
    <item>
      <title>Install ASM</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/service-mesh/install-asm/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/service-mesh/install-asm/index.html</guid>
      <description>Duration: 15 min | Persona: Platform Admin
In this section, you will install a Managed Service Mesh for your GKE cluster. This will opt your cluster in a specific channel in order to get the upgrades handled by Google for the managed control plane and managed data plane.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define ASM feature for the tenant project Define the ASM GKEHubFeature resource:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/gke-hub-feature-asm.yaml apiVersion: gkehub.</description>
    </item>
    <item>
      <title>Personas</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/overview/personas/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/overview/personas/index.html</guid>
      <description>3 personas are involved:
Org Admin Platform Admin Apps Operator Here are the needs of each persona:
The Developer persona is not involved in this workshop for the reason that they should focus on the code of their apps. The Apps Operator persona is responsible to set up the Continuous Integration part to build and push the container images associated to any apps the Developers are building. With this workshop we are not covering this part, we are assuming that the container images are already built, the Apps Operator persona will take it from here in this workshop and will configure the Continuous Deployment part.</description>
    </item>
    <item>
      <title>Set up URL uptime check</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/bankofanthos/set-up-url-uptime-check/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/bankofanthos/set-up-url-uptime-check/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will set up an uptime check on the Bank of Anthos website URL.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh mkdir ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/$BANKOFANTHOS_NAMESPACE Define Uptime check config Define the MonitoringUptimeCheckConfig:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/$BANKOFANTHOS_NAMESPACE/uptime-check-config.yaml apiVersion: monitoring.cnrm.cloud.google.com/v1beta1 kind: MonitoringUptimeCheckConfig metadata: name: uptimecheckconfig-${BANKOFANTHOS_NAMESPACE} spec: projectRef: name: ${TENANT_PROJECT_ID} displayName: ${BANKOFANTHOS_NAMESPACE} period: 900s timeout: 5s monitoredResource: type: &amp;#34;uptime_url&amp;#34; filterLabels: host: ${BANK_OF_ANTHOS_INGRESS_GATEWAY_HOST_NAME} project_id: ${TENANT_PROJECT_ID} httpCheck: port: 443 requestMethod: GET useSsl: true validateSsl: true EOF Deploy Kubernetes manifests cd ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/ git add .</description>
    </item>
    <item>
      <title>Set up URL uptime check</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/set-up-url-uptime-check/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/set-up-url-uptime-check/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will set up an uptime check on the Online Boutique website URL.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh mkdir -p ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/$ONLINEBOUTIQUE_NAMESPACE Define Uptime check config Define the MonitoringUptimeCheckConfig:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/$ONLINEBOUTIQUE_NAMESPACE/uptime-check-config.yaml apiVersion: monitoring.cnrm.cloud.google.com/v1beta1 kind: MonitoringUptimeCheckConfig metadata: name: uptimecheckconfig-${ONLINEBOUTIQUE_NAMESPACE} spec: projectRef: name: ${TENANT_PROJECT_ID} displayName: ${ONLINEBOUTIQUE_NAMESPACE} period: 900s timeout: 5s monitoredResource: type: &amp;#34;uptime_url&amp;#34; filterLabels: host: ${ONLINE_BOUTIQUE_INGRESS_GATEWAY_HOST_NAME} project_id: ${TENANT_PROJECT_ID} httpCheck: port: 443 requestMethod: GET useSsl: true validateSsl: true EOF Deploy Kubernetes manifests cd ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/ git add .</description>
    </item>
    <item>
      <title>Set up URL uptime check</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/set-up-url-uptime-check/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/set-up-url-uptime-check/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will set up an uptime check on the Whereami URL.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh mkdir ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/$WHEREAMI_NAMESPACE Define Uptime check config Define the MonitoringUptimeCheckConfig:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/$WHEREAMI_NAMESPACE/uptime-check-config.yaml apiVersion: monitoring.cnrm.cloud.google.com/v1beta1 kind: MonitoringUptimeCheckConfig metadata: name: uptimecheckconfig-${WHEREAMI_NAMESPACE} spec: projectRef: name: ${TENANT_PROJECT_ID} displayName: ${WHEREAMI_NAMESPACE} period: 900s timeout: 5s monitoredResource: type: &amp;#34;uptime_url&amp;#34; filterLabels: host: ${WHERE_AMI_INGRESS_GATEWAY_HOST_NAME} project_id: ${TENANT_PROJECT_ID} httpCheck: port: 443 requestMethod: GET useSsl: true validateSsl: true EOF Deploy Kubernetes manifests cd ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/ git add .</description>
    </item>
    <item>
      <title>Agenda</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/overview/agenda/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/overview/agenda/index.html</guid>
      <description> Host project As Org Admin, create a Host project As Org Admin, create a Config Controller instance As Org Admin, set up Host project&amp;rsquo;s Git repo As Org Admin, enforce policies for tenant projects Tenant project As Org Admin, set up the Tenant project As Org Admin, set up the Tenant project&amp;rsquo;s Git repo As Org Admin, enforce policies for Google Cloud resources As Org Admin, allow Monitoring for Tenant project As Platform Admin, set up Monitoring in Tenant project Networking As Org Admin, allow Networking for Tenant project As Platform Admin, set up Network in Tenant project GKE cluster As Org Admin, allow GKE for Tenant project As Org Admin, enforce policies for GKE cluster resources As Platform Admin, create GKE cluster in Tenant project As Org Admin, allow Fleet for Tenant project As Platform Admin, set up GKE configs&amp;rsquo;s Git repo in Tenant project As Platform Admin, enforce Kubernetes policies with Pod Security Admission (PSA) and NetworkPolicies As Platform Admin, set up NetworkPolicies logging in GKE cluster Artifact Registry As Org Admin, allow Artifact Registry for Tenant project As Platform Admin, create Artifact Registry in Tenant project and allow GKE cluster to pull containers As Platform Admin, enforce policies for Artifact Registry (allowed container registries) Service Mesh As Org Admin, allow ASM for Tenant project As Platform Admin, install Managed ASM in GKE cluster As Platform Admin, set up ASM configs in GKE cluster As Platform Admin, enforce policies for ASM Ingress Gateway As Platform Admin, create the Public static IP address for the Ingress Gateway As Org Admin, allow Cloud Armor for Tenant project As Platform Admin, set up Cloud Armor in Tenant project As Platform Admin, deploy the Ingress Gateway linked to Cloud Armor in GKE cluster As Platform Admin, deploy NetworkPolicies for the Ingress Gateway namespace in GKE cluster As Platform Admin, deploy AuthorizationPolicies for the Ingress Gateway namespace in GKE cluster Whereami app As Platform Admin, set up DNS for the Whereami app As Platform Admin, set up URL uptime check on the Whereami app As Platform Admin, configure Config Sync for the Whereami app in GKE cluster As Apps Operator, copy Whereami container in private Artifact Registry As Apps Operator, deploy the Whereami app in GKE cluster As Apps Operator, deploy AuthorizationPolicies for the Whereami namespace in GKE cluster As Apps Operator, deploy NetworkPolicies for the Whereami namespace in GKE cluster As Apps Operator, deploy Sidecars for the Whereami namespace in GKE cluster Online Boutique apps As Platform Admin, set up DNS for the Online Boutique website As Platform Admin, set up URL uptime check on the Online Boutique website As Platform Admin, allow Config Sync for the Online Boutique apps in GKE cluster As Platform Admin, configure Config Sync for the Online Boutique apps in GKE cluster As Apps Operator, copy Online Boutique containers in private Artifact Registry As Apps Operator, deploy the Online Boutique apps in GKE cluster As Apps Operator, deploy AuthorizationPolicies for the Online Boutique namespace in GKE cluster As Apps Operator, deploy NetworkPolicies for the Online Boutique namespace in GKE cluster As Apps Operator, deploy Sidecars for the Online Boutique namespace in GKE cluster Memorystore (Redis) As Org Admin, allow Memorystore (Redis) for Tenant project As Org Admin, enforce policies for Memorystore (Redis) resources As Platform Admin, create Memorystore (Redis) instances with and without TLS in Tenant project As Apps Operator, configure Online Boutique apps to use Memorystore (Redis) instance As Apps Operator, secure Online Boutique apps to access Memorystore (Redis) instance via TLS Spanner As Org Admin, allow Spanner for Tenant project As Platform Admin, create Spanner instance in Tenant project As Apps Operator, configure Online Boutique apps to use Spanner instance Bank of Anthos apps As Platform Admin, set up DNS for the Bank of Anthos website As Platform Admin, set up URL uptime check on the Bank of Anthos website As Platform Admin, configure Config Sync for the Bank of Anthos apps in GKE cluster As Apps Operator, copy Bank of Anthos containers in private Artifact Registry As Apps Operator, deploy the Bank of Anthos apps in GKE cluster As Apps Operator, deploy AuthorizationPolicies for the Bank of Anthos namespace in GKE cluster As Apps Operator, deploy NetworkPolicies for the Bank of Anthos namespace in GKE cluster As Apps Operator, deploy Sidecars for the Bank of Anthos namespace in GKE cluster Monitoring &amp;amp; Audit As Platform Admin, verify ASM versions As Apps Operator, monitor apps security As Apps Operator, monitor apps health As Apps Operator, trace apps As Apps Operator, monitor Cloud Armor (WAF) rules As Apps Operator, scan workloads and configurations As Apps Operator, monitor resources synced by Config Sync As Apps Operator, monitor policies violations by Policy Controller As Apps Operator, monitor URLs uptime checks </description>
    </item>
    <item>
      <title>Allow Config Sync</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/allow-config-sync/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/allow-config-sync/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will bind the workload identity capability from the Online Boutique&amp;rsquo;s RepoSync Kubernetes Service Account to the Artifact Registry reader Google Service Account created earlier.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export ONLINEBOUTIQUE_NAMESPACE=onlineboutique&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh mkdir ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/$ONLINEBOUTIQUE_NAMESPACE Bind the Artifact Registry reader GSA to the Online Boutique&amp;rsquo;s RepoSync cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/$ONLINEBOUTIQUE_NAMESPACE/artifactregistry-charts-reader-workload-identity-user.yaml apiVersion: iam.cnrm.cloud.google.com/v1beta1 kind: IAMPartialPolicy metadata: name: ${HELM_CHARTS_READER_GSA}-${ONLINEBOUTIQUE_NAMESPACE} namespace: ${TENANT_PROJECT_ID} annotations: config.</description>
    </item>
    <item>
      <title>Configure Config Sync</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/bankofanthos/configure-config-sync/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/bankofanthos/configure-config-sync/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will set up a dedicated GitHub repository which will contain all the Kubernetes manifests of the Bank of Anthos apps. You will also have the opportunity to catch a policies violation.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export BANKOFANTHOS_NAMESPACE=bankofanthos&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export BANK_OF_ANTHOS_DIR_NAME=acm-workshop-bankofanthos-repo&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh mkdir -p ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs mkdir ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs/$BANKOFANTHOS_NAMESPACE Define Namespace Define a dedicated Namespace for the Bank of Anthos apps:</description>
    </item>
    <item>
      <title>Configure Config Sync</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/whereami/configure-config-sync/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/whereami/configure-config-sync/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will configure Config Sync to sync the resources in the Whereami Namespace via its associated RepoSync and RoleBinding.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export WHEREAMI_NAMESPACE=whereami&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export WHERE_AMI_DIR_NAME=acm-workshop-whereami-repo&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh mkdir -p ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs mkdir ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs/$WHEREAMI_NAMESPACE Create Namespace Define a dedicated Namespace for the Whereami app:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs/$WHEREAMI_NAMESPACE/namespace.yaml apiVersion: v1 kind: Namespace metadata: labels: istio-injection: enabled pod-security.</description>
    </item>
    <item>
      <title>Create GKE cluster</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/create-gke-cluster/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/create-gke-cluster/index.html</guid>
      <description>Duration: 20 min | Persona: Platform Admin
In this section, you will set up a secured GKE cluster including features like: workload identity, least privilege service account for the nodes, Dataplane V2, private nodes, confidential and shielded nodes, etc.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export TENANT_PROJECT_NUMBER=$(gcloud projects describe $TENANT_PROJECT_ID --format=&amp;#39;get(projectNumber)&amp;#39;)&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export GKE_SA=gke-primary-pool&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Define GKE cluster Define the GKE cluster with empty node pool:</description>
    </item>
    <item>
      <title>Create Memorystore</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/create-memorystore/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/create-memorystore/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will create a Memorystore (Redis) instance for the Online Boutique&amp;rsquo;s cartservice app to connect to. We will also create a second Memorystore (Redis) with TLS enabled which will be leveraged in another section.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export REDIS_NAME=cart&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export REDIS_TLS_NAME=cart-tls&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Define Memorystore (Redis) Define the Memorystore (Redis) resource:</description>
    </item>
    <item>
      <title>Enforce Artifact Registry policies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/enforce-artifact-registry-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/enforce-artifact-registry-policies/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will enforce policies in order to make sure that the containers in your clusters are coming from a restricted list of container registries.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define &amp;ldquo;Allowed container registries&amp;rdquo; policy Define the Constraint based on the K8sAllowedRepos ConstraintTemplate for Pods:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/policies/constraints/pod-allowed-container-registries.yaml apiVersion: constraints.gatekeeper.sh/v1beta1 kind: K8sAllowedRepos metadata: name: pod-allowed-container-registries annotations: policycontroller.gke.io/constraintData: | &amp;#34;{ description: &amp;#39;Requires container images to begin with a string from the specified list.</description>
    </item>
    <item>
      <title>Set up ASM configs</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/service-mesh/set-up-asm-configs/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/service-mesh/set-up-asm-configs/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up some configurations in order to get more insights with Cloud Trace and use the distroless image for your sidecar proxies.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh ASM_VERSION=asm-managed-rapid echo &amp;#34;export ASM_VERSION=${ASM_VERSION}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh ASM_VERSION is set to asm-managed-rapid because the Managed ASM is following the GKE&amp;rsquo;s channel: rapid.
Create a dedicated istio-system folder in the GKE configs&amp;rsquo;s Git repo:</description>
    </item>
    <item>
      <title>Set up Cloud Armor</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/set-up-cloud-armor/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/set-up-cloud-armor/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will set up Cloud Armor preconfigured WAF rules such as: SQL injection, local/remote file inclusion, etc.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh SECURITY_POLICY_NAME=$GKE_NAME-asm-ingressgateway echo &amp;#34;export SECURITY_POLICY_NAME=${SECURITY_POLICY_NAME}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export SSL_POLICY_NAME=${SECURITY_POLICY_NAME}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Define Cloud Armor rules Define the Ingress Gateway&amp;rsquo;s Cloud Armor rules:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/cloud-armor.yaml apiVersion: compute.cnrm.cloud.google.com/v1beta1 kind: ComputeSecurityPolicy metadata: annotations: cnrm.cloud.google.com/project-id: ${TENANT_PROJECT_ID} name: ${SECURITY_POLICY_NAME} namespace: ${TENANT_PROJECT_ID} spec: adaptiveProtectionConfig: layer7DdosDefenseConfig: enable: true advancedOptionsConfig: logLevel: VERBOSE rule: - action: allow description: &amp;#34;Default rule&amp;#34; match: versionedExpr: SRC_IPS_V1 config: srcIpRanges: - &amp;#34;*&amp;#34; priority: 2147483647 - action: deny(403) description: &amp;#34;XSS&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;xss-v33-canary&amp;#39;)&amp;#34; priority: 1000 - action: deny(403) description: &amp;#34;SQL injection level 2&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredWaf(&amp;#39;sqli-v33-canary&amp;#39;, {&amp;#39;sensitivity&amp;#39;: 2, &amp;#39;opt_out_rule_ids&amp;#39;: [&amp;#39;owasp-crs-v030301-id942200-sqli&amp;#39;, &amp;#39;owasp-crs-v030301-id942260-sqli&amp;#39;, &amp;#39;owasp-crs-v030301-id942430-sqli&amp;#39;]})&amp;#34; priority: 2000 - action: deny(403) description: &amp;#34;Local file inclusion&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;lfi-v33-canary&amp;#39;)&amp;#34; priority: 3000 - action: deny(403) description: &amp;#34;Remote file inclusion&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;rfi-v33-canary&amp;#39;)&amp;#34; priority: 4000 - action: deny(403) description: &amp;#34;CVE-2021-44228 and CVE-2021-45046&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;cve-canary&amp;#39;)&amp;#34; priority: 12345 - action: deny(403) description: &amp;#34;Remote code execution&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;rce-v33-canary&amp;#39;)&amp;#34; priority: 5000 - action: deny(403) description: &amp;#34;Method enforcement&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;methodenforcement-v33-canary&amp;#39;)&amp;#34; priority: 6000 - action: deny(403) description: &amp;#34;Scanner detection&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;scannerdetection-v33-canary&amp;#39;)&amp;#34; priority: 7000 - action: deny(403) description: &amp;#34;Protocol attack&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;protocolattack-v33-canary&amp;#39;)&amp;#34; priority: 8000 - action: deny(403) description: &amp;#34;PHP injection attack&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;php-v33-canary&amp;#39;)&amp;#34; priority: 9000 - action: deny(403) description: &amp;#34;Session fixation attack&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;sessionfixation-v33-canary&amp;#39;)&amp;#34; priority: 10000 - action: deny(403) description: &amp;#34;Java attack&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;java-v33-canary&amp;#39;)&amp;#34; priority: 11000 - action: deny(403) description: &amp;#34;NodeJS attack&amp;#34; match: expr: expression: &amp;#34;evaluatePreconfiguredExpr(&amp;#39;nodejs-v33-canary&amp;#39;)&amp;#34; priority: 12000 EOF Here we are leveraging the Cloud Armor preconfigured WAF rules: xss, sqli, lfi, rfi, cve, rce, methodenforcement, scannerdetection, protocolattack, php, sessionfixation, java and nodejs.</description>
    </item>
    <item>
      <title>Configure Config Sync</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/configure-config-sync/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/configure-config-sync/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will configure Config Sync to sync the resources in the Online Boutique Namespace via its associated RoleBinding.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh mkdir -p ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs mkdir ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs/$ONLINEBOUTIQUE_NAMESPACE Define Namespace Define a dedicated Namespace for the Online Boutique apps:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/repo-syncs/$ONLINEBOUTIQUE_NAMESPACE/namespace.yaml apiVersion: v1 kind: Namespace metadata: labels: istio-injection: enabled pod-security.kubernetes.io/enforce: restricted name: ${ONLINEBOUTIQUE_NAMESPACE} EOF In addition to the istio-injection to include this Namespace into our Service Mesh, we are also adding the pod-security.</description>
    </item>
    <item>
      <title>Deploy Ingress Gateway</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/deploy-ingress-gateway/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/deploy-ingress-gateway/index.html</guid>
      <description>Duration: 15 min | Persona: Platform Admin
In this section, you will deploy a secured Ingress Gateway (unprivileged container, managed certificates, Cloud Armor, etc.) in its dedicated namespace in the GKE cluster.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export INGRESS_GATEWAY_NAME=asm-ingressgateway&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export INGRESS_GATEWAY_LABEL=&amp;#39;asm: ingressgateway&amp;#39;&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Create a dedicated folder for the ASM Ingress Gateway in the GKE configs&amp;rsquo;s Git repo:
mkdir ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/$INGRESS_GATEWAY_NAMESPACE Define Namespace cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/$INGRESS_GATEWAY_NAMESPACE/namespace.</description>
    </item>
    <item>
      <title>Enforce Service Mesh policies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/service-mesh/enforce-service-mesh-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/service-mesh/enforce-service-mesh-policies/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will enforce policies in order to make sure that your clusters, namespaces and apps are well configured to be secured by your Service Mesh.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export INGRESS_GATEWAY_NAMESPACE=asm-ingress&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Define &amp;ldquo;Automatic sidecar proxy injection&amp;rdquo; policies https://cloud.google.com/service-mesh/docs/anthos-service-mesh-proxy-injection
Define the namespaces-automatic-sidecar-injection-label Constraint based on the K8sRequiredLabels ConstraintTemplate for Namespaces:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/policies/constraints/namespaces-automatic-sidecar-injection-label.yaml apiVersion: constraints.</description>
    </item>
    <item>
      <title>Deploy NetworkPolicies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/deploy-network-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/deploy-network-policies/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will see the Policy Controller violation regarding to the missing NetworkPolicies in the Ingress Gateway. Finally, you will fix this violation by deploying the associated resources.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh See the Policy Controller violations See the Policy Controller violations in the GKE cluster, by running this command and click on this link:
echo -e &amp;#34;https://console.cloud.google.com/kubernetes/policy_controller/dashboard?project=${TENANT_PROJECT_ID}&amp;#34; You will see that the K8sRequireNamespaceNetworkPolicies Constraint has this violation: Namespace &amp;lt;asm-ingress&amp;gt; does not have a NetworkPolicy.</description>
    </item>
    <item>
      <title>Monitor WAF rules</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/monitoring-and-audit/monitor-waf-rules/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/monitoring-and-audit/monitor-waf-rules/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will monitor Cloud Armor security policies logs (WAF rules).
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh In the Google Cloud console, navigate to Network Security &amp;gt; Cloud Armor service. Click on the link displayed by the command below:
echo -e &amp;#34;https://console.cloud.google.com/net-security/securitypolicies/details/${SECURITY_POLICY_NAME}?project=${TENANT_PROJECT_ID}&amp;#34; Using Cloud Logging, you can view every request evaluated by a Google Cloud Armor security policy and the outcome or action taken.</description>
    </item>
    <item>
      <title>Set up GKE configs&#39;s Git repo</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/set-up-gke-configs-git-repo/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/set-up-gke-configs-git-repo/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will set up Config Sync and Policy Controller for the GKE cluster. You will also configure a main/root GitHub repository for this GKE cluster.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export GKE_CONFIGS_DIR_NAME=acm-workshop-gke-configs-repo&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Define ACM GKEHubFeature Define the ACM GKEHubFeature resource:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$TENANT_PROJECT_DIR_NAME/gke-hub-feature-acm.yaml apiVersion: gkehub.cnrm.cloud.google.com/v1beta1 kind: GKEHubFeature metadata: name: configmanagement namespace: ${TENANT_PROJECT_ID} spec: projectRef: name: ${TENANT_PROJECT_ID} location: global resourceID: configmanagement EOF The resourceID must be configmanagement if you want to use Anthos Config Management feature.</description>
    </item>
    <item>
      <title>Set up Monitoring</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/tenant-project/set-up-monitoring/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/tenant-project/set-up-monitoring/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up an monitoring notification channel with you email and a generic alert policy on URLs uptime checks for the Tenant project.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define variables for this page:
export NOTIFICATION_CHANNEL_EMAIL_ADDRESS=FIXME export NOTIFICATION_CHANNEL_NAME=monitoringnotificationchannel-email Set your own email address for the NOTIFICATION_CHANNEL_EMAIL_ADDRESS variable, this will be used when defining the monitoring notification channel below.
Define the monitoring notification channel with your email Define the VPC:</description>
    </item>
    <item>
      <title>Deploy AuthorizationPolicies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/deploy-authorization-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/deploy-authorization-policies/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will deploy granular and specific AuthorizationPolicies for the Ingress Gateway namespace.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define AuthorizationPolicy cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/$INGRESS_GATEWAY_NAMESPACE/authorizationpolicy_ingress-gateway.yaml apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: ${INGRESS_GATEWAY_NAME} namespace: ${INGRESS_GATEWAY_NAMESPACE} spec: selector: matchLabels: app: ${INGRESS_GATEWAY_NAME} rules: - to: - operation: ports: - &amp;#34;8080&amp;#34; EOF Deploy Kubernetes manifests cd ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/ git add . &amp;amp;&amp;amp; git commit -m &amp;#34;Ingress Gateway AuthorizationPolicy&amp;#34; &amp;amp;&amp;amp; git push origin main Check deployments List the Kubernetes resources managed by Config Sync in GKE cluster for the GKE cluster configs repository: UI gcloud Run this command and click on this link:</description>
    </item>
    <item>
      <title>Enforce Kubernetes policies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/enforce-kubernetes-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/enforce-kubernetes-policies/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will enforce Kubernetes policies for Pod Security Admission (PSA) and NetworkPolicies.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Enforce Pod Security Admission (PSA) policies As best practice we will ensure that any Namespaces enables the Pod Security Admission (PSA) feature.
Define the namespaces-required-psa-label Constraint based on the K8sRequiredLabels ConstraintTemplate for Namespaces:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/policies/constraints/namespaces-required-psa-label.yaml apiVersion: constraints.gatekeeper.sh/v1beta1 kind: K8sRequiredLabels metadata: name: namespaces-required-psa-label annotations: policycontroller.</description>
    </item>
    <item>
      <title>Set up NetworkPolicies logging</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/set-up-network-policies-logging/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/set-up-network-policies-logging/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up the NetworkPolicies logging in order to get more insights about the logs generated by the denied or allowed requests controlled by NetworkPolicies thanks to the GKE Dataplane V2 feature.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define Network Policy logging cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/networkpolicies-logging.yaml kind: NetworkLogging apiVersion: networking.gke.io/v1alpha1 metadata: name: default spec: cluster: allow: log: false delegate: false deny: log: true delegate: false EOF Deploy Kubernetes manifests cd ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/ git add .</description>
    </item>
    <item>
      <title>Monitor uptime checks</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/monitoring-and-audit/monitor-uptime-checks/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/monitoring-and-audit/monitor-uptime-checks/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will monitor the uptime checks defined earlier in this workshop.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh In the Google Cloud console, navigate to Monitoring &amp;gt; Uptime checks service. Click on the link displayed by the command below:
echo -e &amp;#34;https://console.cloud.google.com/monitoring/uptime?project=${TENANT_PROJECT_ID}&amp;#34; Then, you could select one of the uptime checks config to get more insights:
With the email notification on the uptime checks alerting we set earlier in this workshop, if there is any alert you will receive an email similar to this:</description>
    </item>
  </channel>
</rss>
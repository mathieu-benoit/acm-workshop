<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>org-admin on </title>
    <link>https://mathieu-benoit.github.io/acm-workshop/tags/org-admin/index.html</link>
    <description>Recent content in org-admin on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://mathieu-benoit.github.io/acm-workshop/tags/org-admin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Allow Artifact Registry</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/allow-artifact-registry/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/allow-artifact-registry/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision the Artifact Registry to have your private container images. You will also the containers analysis and scanning features of Artifact Registry.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shDefine role Define the artifactregistry.</description>
    </item>
    <item>
      <title>Allow ASM</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/service-mesh/allow-asm/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/service-mesh/allow-asm/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account to allow later this service account configure a Service Mesh for your GKE cluster. You will also enable the Anthos API in order to leverage the Service Mesh feature from within the Google Cloud console.
Initialize variables:</description>
    </item>
    <item>
      <title>Allow GKE</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/allow-gke/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/allow-gke/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision the GKE cluster.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shDefine roles Define the container.admin, iam.serviceAccountAdmin, resourcemanager.projectIamAdmin, iam.serviceAccountUser and serviceusage.serviceUsageConsumer roles with an IAMPolicyMember resource for the Tenant project&amp;rsquo;s service account:</description>
    </item>
    <item>
      <title>Allow Memorystore</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/allow-memorystore/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/allow-memorystore/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision Memorystore (Redis) instances.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shDefine API Define the Memorystore (Redis) API Service resource for the Tenant project:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/projects/$TENANT_PROJECT_ID/redis-service.yaml apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1 kind: Service metadata: annotations: cnrm.</description>
    </item>
    <item>
      <title>Allow Networking</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/networking/allow-networking/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/networking/allow-networking/index.html</guid>
      <description>Duration: 2 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision the networking services.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shDefine role Define the compute.networkAdmin role with an IAMPolicyMember for the Tenant project&amp;rsquo;s service account:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/projects/$TENANT_PROJECT_ID/network-admin.yaml apiVersion: iam.cnrm.cloud.google.com/v1beta1 kind: IAMPolicyMember metadata: name: network-admin-${TENANT_PROJECT_ID} namespace: config-control annotations: config.</description>
    </item>
    <item>
      <title>Allow Spanner</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/spanner/allow-spanner/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/spanner/allow-spanner/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision a Spanner instance.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shDefine API Define the Spanner API Service resource for the Tenant project:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/projects/$TENANT_PROJECT_ID/spanner-service.yaml apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1 kind: Service metadata: annotations: cnrm.</description>
    </item>
    <item>
      <title>Create Host project</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/host-project/create-host-project/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/host-project/create-host-project/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will create the Host project. This Google Cloud project will host the Config Controller instance later.
Two Google Cloud Projects will be created during this workshop, we will assign them your Billing Account Id. Set your Billing Account Id for the rest of the workshop:
BILLING_ACCOUNT_ID=FIXMEThese two Google Cloud Projects will be created either at the Folder level (recommended) or at the Organization level.</description>
    </item>
    <item>
      <title>Create Tenant project</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/tenant-project/create-tenant-project/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/tenant-project/create-tenant-project/index.html</guid>
      <description>Duration: 10 min | Persona: Org Admin
In this section, you will create the Tenant project. The Tenant project will contain all the Google Cloud resources needed in this workshop.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh TENANT_PROJECT_ID=acm-workshop-${RANDOM_SUFFIX}-tenant echo &amp;#34;export TENANT_PROJECT_ID=${TENANT_PROJECT_ID}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export TENANT_PROJECT_SA_EMAIL=${TENANT_PROJECT_ID}@${HOST_PROJECT_ID}.iam.gserviceaccount.com&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.shCreate a dedicated folder for this Tenant project resources:
mkdir ${WORK_DIR}$HOST_PROJECT_DIR_NAME/projects mkdir ${WORK_DIR}$HOST_PROJECT_DIR_NAME/projects/$TENANT_PROJECT_IDDefine GCP project Define the GCP project either at the Folder level or the Organization level: &amp;#8203; Folder level Org level At the Folder level:</description>
    </item>
    <item>
      <title>Allow Cloud Armor</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/allow-cloud-armor/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/ingress-gateway/allow-cloud-armor/index.html</guid>
      <description>Duration: 2 min | Persona: Org Admin
In this section, you will grant the appropriate IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision Cloud Armor.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shDefine role Define the compute.securityAdmin role with an IAMPolicyMember for the Tenant project&amp;rsquo;s service account:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/projects/$TENANT_PROJECT_ID/security-admin.yaml apiVersion: iam.cnrm.cloud.google.com/v1beta1 kind: IAMPolicyMember metadata: name: security-admin-${TENANT_PROJECT_ID} namespace: config-control annotations: config.kubernetes.io/depends-on: iam.cnrm.cloud.google.com/namespaces/config-control/IAMServiceAccount/${TENANT_PROJECT_ID},resourcemanager.cnrm.cloud.google.com/namespaces/config-control/Project/${TENANT_PROJECT_ID} spec: memberFrom: serviceAccountRef: name: ${TENANT_PROJECT_ID} role: roles/compute.</description>
    </item>
    <item>
      <title>Create Config Controller</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/host-project/create-config-controller/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/host-project/create-config-controller/index.html</guid>
      <description>Duration: 20 min | Persona: Org Admin
In this section, you will create your Config Controller instance. You will also add the least privilege Google Cloud roles to its associated service account. This Config Controller instance will allow throughout this workshop to deploy any infrastructure via Kubernetes manifests.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export CONFIG_CONTROLLER_NAME=configcontroller&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export CONFIG_CONTROLLER_LOCATION=northamerica-northeast1&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export CONFIG_CONTROLLER_NETWORK=default&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.</description>
    </item>
    <item>
      <title>Enforce GKE policies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/enforce-gke-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/enforce-gke-policies/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will set up policies in order to enforce governance against the Kubernetes manifests defining your GKE cluster. This will guarantee that the best practices in term of security are respected.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shEnforce GKE clusters policies Define the ConstraintTemplate:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/policies/templates/gkeclusterrequirement.yaml apiVersion: templates.gatekeeper.sh/v1 kind: ConstraintTemplate metadata: name: gkeclusterrequirement annotations: description: &amp;#34;Requirements for any GKE cluster.</description>
    </item>
    <item>
      <title>Enforce Memorystore policies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/enforce-memorystore-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/enforce-memorystore-policies/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will set up policies in order to enforce governance against the Kubernetes manifests defining your Memorystore (Redis) instances.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shEnforce Memorystore policies Define the ConstraintTemplate resource:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/policies/templates/limitmemorystoreredis.yaml apiVersion: templates.gatekeeper.sh/v1 kind: ConstraintTemplate metadata: name: limitmemorystoreredis annotations: description: &amp;#34;Requirements for any Memorystore (Redis) instance.&amp;#34; spec: crd: spec: names: kind: LimitMemorystoreRedis targets: - target: admission.k8s.gatekeeper.sh rego: |- package limitmemorystoreredis violation[{&amp;#34;msg&amp;#34;:msg}] { input.</description>
    </item>
    <item>
      <title>Personas</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/overview/personas/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/overview/personas/index.html</guid>
      <description>3 personas are involved:
Org Admin Platform Admin Apps Operator Here are the needs of each persona:
Info The Developer persona is not involved in this workshop for the reason that they should focus on the code of their apps. The Apps Operator persona is responsible to set up the Continuous Integration part to build and push the container images associated to any apps the Developers are building. With this workshop we are not covering this part, we are assuming that the container images are already built, the Apps Operator persona will take it from here in this workshop and will configure the Continuous Deployment part.</description>
    </item>
    <item>
      <title>Set up Tenant project&#39;s Git repo</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/tenant-project/set-up-gke-project-git-repo/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/tenant-project/set-up-gke-project-git-repo/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will set up a dedicated GitHub repository containing all the Kubernetes manifests which will be deployed by Config Sync and Config Connector in order to provision the Google Cloud services in the Tenant project.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export TENANT_PROJECT_DIR_NAME=acm-workshop-tenant-project-repo&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.shCreate GitHub repository Create a dedicated GitHub repository to store any Kubernetes manifests associated to the Tenant project:</description>
    </item>
    <item>
      <title>Agenda</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/overview/agenda/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/overview/agenda/index.html</guid>
      <description> Host project As Org Admin, create a Host project As Org Admin, create a Config Controller instance As Org Admin, set up Host project&amp;rsquo;s Git repo As Org Admin, enforce policies for tenant projects Tenant project As Org Admin, set up the Tenant project As Org Admin, set up the Tenant project&amp;rsquo;s Git repo As Org Admin, enforce policies for Google Cloud resources As Org Admin, allow Monitoring for Tenant project As Platform Admin, set up Monitoring in Tenant project Networking As Org Admin, allow Networking for Tenant project As Platform Admin, set up Network in Tenant project GKE cluster As Org Admin, allow GKE for Tenant project As Org Admin, enforce policies for GKE cluster resources As Platform Admin, create GKE cluster in Tenant project As Org Admin, allow Fleet for Tenant project As Platform Admin, set up GKE configs&amp;rsquo;s Git repo in Tenant project As Platform Admin, enforce Kubernetes policies with Pod Security Admission (PSA) and NetworkPolicies As Platform Admin, set up NetworkPolicies logging in GKE cluster Artifact Registry As Org Admin, allow Artifact Registry for Tenant project As Platform Admin, create Artifact Registry in Tenant project and allow GKE cluster to pull containers As Platform Admin, enforce policies for Artifact Registry (allowed container registries) Service Mesh As Org Admin, allow ASM for Tenant project As Platform Admin, install Managed ASM in GKE cluster As Platform Admin, set up ASM configs in GKE cluster As Platform Admin, enforce policies for ASM Ingress Gateway As Platform Admin, create the Public static IP address for the Ingress Gateway As Org Admin, allow Cloud Armor for Tenant project As Platform Admin, set up Cloud Armor in Tenant project As Platform Admin, deploy the Ingress Gateway linked to Cloud Armor in GKE cluster As Platform Admin, deploy NetworkPolicies for the Ingress Gateway namespace in GKE cluster As Platform Admin, deploy AuthorizationPolicies for the Ingress Gateway namespace in GKE cluster Whereami app As Platform Admin, set up DNS for the Whereami app As Platform Admin, set up URL uptime check on the Whereami app As Platform Admin, configure Config Sync for the Whereami app in GKE cluster As Apps Operator, copy Whereami container in private Artifact Registry As Apps Operator, deploy the Whereami app in GKE cluster As Apps Operator, deploy AuthorizationPolicies for the Whereami namespace in GKE cluster As Apps Operator, deploy NetworkPolicies for the Whereami namespace in GKE cluster As Apps Operator, deploy Sidecars for the Whereami namespace in GKE cluster Online Boutique apps As Platform Admin, set up DNS for the Online Boutique website As Platform Admin, set up URL uptime check on the Online Boutique website As Platform Admin, allow Config Sync for the Online Boutique apps in GKE cluster As Platform Admin, configure Config Sync for the Online Boutique apps in GKE cluster As Apps Operator, copy Online Boutique containers in private Artifact Registry As Apps Operator, deploy the Online Boutique apps in GKE cluster As Apps Operator, deploy AuthorizationPolicies for the Online Boutique namespace in GKE cluster As Apps Operator, deploy NetworkPolicies for the Online Boutique namespace in GKE cluster As Apps Operator, deploy Sidecars for the Online Boutique namespace in GKE cluster Memorystore (Redis) As Org Admin, allow Memorystore (Redis) for Tenant project As Org Admin, enforce policies for Memorystore (Redis) resources As Platform Admin, create Memorystore (Redis) instances with and without TLS in Tenant project As Apps Operator, configure Online Boutique apps to use Memorystore (Redis) instance As Apps Operator, secure Online Boutique apps to access Memorystore (Redis) instance via TLS Spanner As Org Admin, allow Spanner for Tenant project As Platform Admin, create Spanner instance in Tenant project As Apps Operator, configure Online Boutique apps to use Spanner instance Bank of Anthos apps As Platform Admin, set up DNS for the Bank of Anthos website As Platform Admin, set up URL uptime check on the Bank of Anthos website As Platform Admin, configure Config Sync for the Bank of Anthos apps in GKE cluster As Apps Operator, copy Bank of Anthos containers in private Artifact Registry As Apps Operator, deploy the Bank of Anthos apps in GKE cluster As Apps Operator, deploy AuthorizationPolicies for the Bank of Anthos namespace in GKE cluster As Apps Operator, deploy NetworkPolicies for the Bank of Anthos namespace in GKE cluster As Apps Operator, deploy Sidecars for the Bank of Anthos namespace in GKE cluster Monitoring &amp;amp; Audit As Platform Admin, verify ASM versions As Apps Operator, monitor apps security As Apps Operator, monitor apps health As Apps Operator, trace apps As Apps Operator, monitor Cloud Armor (WAF) rules As Apps Operator, scan workloads and configurations As Apps Operator, monitor resources synced by Config Sync As Apps Operator, monitor policies violations by Policy Controller As Apps Operator, monitor URLs uptime checks </description>
    </item>
    <item>
      <title>Enforce GCP resources policies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/tenant-project/enforce-gcp-resources-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/tenant-project/enforce-gcp-resources-policies/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will set up policies in order to enforce governance against the Kubernetes manifests defining your Google Cloud services. As an example, you will limit the locations and the kind available for the Google Cloud services.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export GKE_LOCATION=northamerica-northeast1&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Info We are defining the GKE_LOCATION in northamerica-northeast1 this will be used later for the location of the VPC, GKE, Artifact Registry, etc.</description>
    </item>
    <item>
      <title>Set up Host project&#39;s Git repo</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/host-project/set-up-host-project-git-repo/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/host-project/set-up-host-project-git-repo/index.html</guid>
      <description>Duration: 10 min | Persona: Org Admin
In this section, you will set up the primary Git repository of the Config Controller instance in order to have in place a GitOps approach to deploy your infrastructure in Google Cloud. You will also configure a Cloud NAT to this Config Controller instance to give it access to the Internet (GitHub repositories) in Egress. Finally, you will enable the cloudbilling API in the Host project, which will allow the assignment of the Billing Account Id to any Google Cloud project Config Controller will create.</description>
    </item>
    <item>
      <title>Allow Fleet</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/allow-fleet/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/gke-cluster/allow-fleet/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision the Fleet features.
Define variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shDefine role Define the gkehub.admin role with an IAMPolicyMember for the Tenant project&amp;rsquo;s service account:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/projects/$TENANT_PROJECT_ID/gke-hub-admin.yaml apiVersion: iam.cnrm.cloud.google.com/v1beta1 kind: IAMPolicyMember metadata: name: gke-hub-admin-${TENANT_PROJECT_ID} namespace: config-control annotations: config.</description>
    </item>
    <item>
      <title>Allow Monitoring</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/tenant-project/allow-monitoring/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/tenant-project/allow-monitoring/index.html</guid>
      <description>Duration: 2 min | Persona: Org Admin
In this section, you will grant the appropriate the IAM roles for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision some monitoring features.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shDefine roles Define the monitoring.uptimeCheckConfigEditor role with an IAMPolicyMember for the Tenant project&amp;rsquo;s service account:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/projects/$TENANT_PROJECT_ID/uptime-check-config-editor.yaml apiVersion: iam.cnrm.cloud.google.com/v1beta1 kind: IAMPolicyMember metadata: name: uptime-check-config-editor-${TENANT_PROJECT_ID} namespace: config-control annotations: config.</description>
    </item>
    <item>
      <title>Enforce Tenant projects policies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/host-project/enforce-tenant-projects-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/host-project/enforce-tenant-projects-policies/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section you will enforce policies to guarantee that any Namespaces in the ConfigController instance defining any Tenant project should contain its own ConfigConnectorContext object in order to leverage the namespaced mode of Config Connector.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.shDefine the &amp;ldquo;Require ConfigConnectorContext for Namespaces&amp;rdquo; policies Define the ConstraintTemplate making sure that any Namespaces has a ConfigConnectorContext in it:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/policies/templates/requirenamespaceconfigconnectorcontext.</description>
    </item>
  </channel>
</rss>
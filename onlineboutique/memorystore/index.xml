<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memorystore on</title><link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/index.html</link><description>Recent content in Memorystore on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/index.xml" rel="self" type="application/rss+xml"/><item><title>Allow Memorystore</title><link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/allow-memorystore/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/allow-memorystore/index.html</guid><description>Duration: 5 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision Memorystore (Redis) instances.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define API Define the Memorystore (Redis) API Service resource for the Tenant project:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/projects/$TENANT_PROJECT_ID/redis-service.yaml apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1 kind: Service metadata: annotations: cnrm.</description></item><item><title>Enforce Memorystore policies</title><link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/enforce-memorystore-policies/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/enforce-memorystore-policies/index.html</guid><description>Duration: 5 min | Persona: Org Admin
In this section, you will set up policies in order to enforce governance against the Kubernetes manifests defining your Memorystore (Redis) instances.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Enforce Memorystore policies Define the ConstraintTemplate resource:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$HOST_PROJECT_DIR_NAME/policies/templates/limitmemorystoreredis.yaml apiVersion: templates.gatekeeper.sh/v1 kind: ConstraintTemplate metadata: name: limitmemorystoreredis annotations: description: &amp;#34;Requirements for any Memorystore (Redis) instance.&amp;#34; spec: crd: spec: names: kind: LimitMemorystoreRedis targets: - target: admission.</description></item><item><title>Create Memorystore</title><link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/create-memorystore/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/create-memorystore/index.html</guid><description>Duration: 10 min | Persona: Platform Admin
In this section, you will create a Memorystore (Redis) instance for the Online Boutique&amp;rsquo;s cartservice app to connect to. We will also create a second Memorystore (Redis) with TLS enabled which will be leveraged in another section.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export REDIS_NAME=cart&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export REDIS_TLS_NAME=cart-tls&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Define Memorystore (Redis) Define the Memorystore (Redis) resource:</description></item><item><title>Use Memorystore</title><link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/use-memorystore/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/use-memorystore/index.html</guid><description>Duration: 10 min | Persona: Apps Operator
In this section, you will update the OnlineBoutique&amp;rsquo;s cartservice app in order to point to the Memorystore (Redis) instance previously created.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Update RepoSync to deploy the Online Boutique&amp;rsquo;s Helm chart Get Memorystore (Redis) connection information:
export REDIS_IP=$(gcloud redis instances describe $REDIS_NAME --region $GKE_LOCATION --project $TENANT_PROJECT_ID --format=&amp;#39;get(host)&amp;#39;) export REDIS_PORT=$(gcloud redis instances describe $REDIS_NAME --region $GKE_LOCATION --project $TENANT_PROJECT_ID --format=&amp;#39;get(port)&amp;#39;) Define the RepoSync to deploy the Online Boutique&amp;rsquo;s Helm chart with the cartservice pointing to the Memorystore (Redis) database:</description></item><item><title>Secure Memorystore access</title><link>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/secure-memorystore-access/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mathieu-benoit.github.io/acm-workshop/onlineboutique/memorystore/secure-memorystore-access/index.html</guid><description>Duration: 10 min | Persona: Apps Operator
In this section, you will secure the access by TLS to the Memorystore (Redis) instance from the OnlineBoutique&amp;rsquo;s cartservice app, without updating the source code of the app, just with Istio&amp;rsquo;s capabilities.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh echo &amp;#34;export CART_MEMORYSTORE_HOST=${REDIS_NAME}.memorystore-redis.${ONLINEBOUTIQUE_NAMESPACE}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh source ${WORK_DIR}acm-workshop-variables.sh Info The CART_MEMORYSTORE_HOST has been built in order to explicitly represent the Memorystore (Redis) endpoint on an Istio perspective.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>5. Artifact Registry on </title>
    <link>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/index.html</link>
    <description>Recent content in 5. Artifact Registry on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://mathieu-benoit.github.io/acm-workshop/artifact-registry/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Allow Artifact Registry</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/allow-artifact-registry/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/allow-artifact-registry/index.html</guid>
      <description>Duration: 5 min | Persona: Org Admin
In this section, you will enable and grant the appropriate APIs in the Tenant project and the IAM role for the Tenant project&amp;rsquo;s service account. This will allow later this service account to provision the Artifact Registry to have your private container images. You will also the containers analysis and scanning features of Artifact Registry.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define role Define the artifactregistry.</description>
    </item>
    <item>
      <title>Create Artifact Registry</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/create-artifact-registry/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/create-artifact-registry/index.html</guid>
      <description>Duration: 5 min | Persona: Platform Admin
In this section, you will set up your own private Artifact Registry to store both all the container images and the Helm charts required for this workshop. You will also grant viewer access to both: the GKE&amp;rsquo;s GSA and Config Sync&amp;rsquo;s GSA.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh CONTAINER_REGISTRY_NAME=containers echo &amp;#34;export CONTAINER_REGISTRY_NAME=${CONTAINER_REGISTRY_NAME}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh CHART_REGISTRY_NAME=charts echo &amp;#34;export CHART_REGISTRY_NAME=${CHART_REGISTRY_NAME}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.sh CONTAINER_REGISTRY_HOST_NAME=${GKE_LOCATION}-docker.pkg.dev echo &amp;#34;export CONTAINER_REGISTRY_HOST_NAME=${CONTAINER_REGISTRY_HOST_NAME}&amp;#34; &amp;gt;&amp;gt; ${WORK_DIR}acm-workshop-variables.</description>
    </item>
    <item>
      <title>Enforce Artifact Registry policies</title>
      <link>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/enforce-artifact-registry-policies/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathieu-benoit.github.io/acm-workshop/artifact-registry/enforce-artifact-registry-policies/index.html</guid>
      <description>Duration: 10 min | Persona: Platform Admin
In this section, you will enforce policies in order to make sure that the containers in your clusters are coming from a restricted list of container registries.
Initialize variables:
WORK_DIR=~/ source ${WORK_DIR}acm-workshop-variables.sh Define &amp;ldquo;Allowed container registries&amp;rdquo; policy Define the Constraint based on the K8sAllowedRepos ConstraintTemplate for Pods:
cat &amp;lt;&amp;lt;EOF &amp;gt; ${WORK_DIR}$GKE_CONFIGS_DIR_NAME/policies/constraints/pod-allowed-container-registries.yaml apiVersion: constraints.gatekeeper.sh/v1beta1 kind: K8sAllowedRepos metadata: name: pod-allowed-container-registries annotations: policycontroller.gke.io/constraintData: | &amp;#34;{ description: &amp;#39;Requires container images to begin with a string from the specified list.</description>
    </item>
  </channel>
</rss>